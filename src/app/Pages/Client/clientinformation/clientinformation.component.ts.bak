import { Component, OnInit } from '@angular/core';
import { CommunicateService } from 'src/app/services/Communication/communicate.service';
import { FormGroup, FormControl, Validators, FormBuilder, FormArray } from '/node_modules/@angular/forms';
import { CommonCallService } from 'src/app/services/CommonNodeCall/common-call.service';
import { MIN_LENGTH_VALIDATOR } from '@angular/forms/src/directives/validators';

export class labelId {
    label:string    
    id: number
}

@Component({
  selector: 'app-clientinformation',
  templateUrl: './clientinformation.component.html',
  styleUrls: ['./clientinformation.component.css']
})
export class ClientinformationComponent implements OnInit {
    storingid;
  form:FormGroup;
    ClientAddress: any;
    

  constructor(private _communicationservice:CommunicateService,private _formbuilder:FormBuilder,
    private _commonNodeCallService:CommonCallService) { }

    // ***Industry autocomplete dropdown***
getindustries: labelId[] =[];
filteredIndustry: labelId[] =[];
filterIndustry(event) {
        // console.log("checking event "+ event);
        this.filteredIndustry = this.getindustries
        .filter(data => data.label.toString()
        .toLowerCase()
        .indexOf(event.query.toString().toLowerCase()) !== -1);
        // console.log("checking tostring "+ event.query.toString());
        
    }

    IndustryDropdown(){
    this.filteredIndustry;
    }

        // autocomplete dropdown for type of spaces
        gettypeofspace: labelId[] =[];
        filteredspaces: labelId[] =[];
        filterspaces(event) {
            // console.log("checking event "+ event);
            this.filteredspaces = this.gettypeofspace
            .filter(data => data.label.toString()
            .toLowerCase()
            .indexOf(event.query.toString().toLowerCase()) !== -1);
            // console.log("checking tostring "+ event.query.toString());
            
        }

    Type_Of_Space_Dropdown(){
    this.filteredspaces;
    }

    
// autocomplete dropdown for city

cityresults: labelId[] =[];
filteredcity: labelId[] =[];
filtercity(event) {
        // console.log("checking event "+ event);
        this.filteredcity = this.cityresults
        .filter(data => data.label.toString()
        .toLowerCase()
        .indexOf(event.query.toString().toLowerCase()) !== -1);
        // console.log("checking tostring "+ event.query.toString());
        
    }

    cityDropdown(){
    this.filteredcity;
    }

  // autocomplete dropdown for category
  categoryresults: labelId[] =[];
  filteredcategory: labelId[] =[];
  filtercategory(event) {
          // console.log("checking event "+ event);
          this.filteredcategory = this.categoryresults
          .filter(data => data.label.toString()
          .toLowerCase()
          .indexOf(event.query.toString().toLowerCase()) !== -1);
          // console.log("checking tostring "+ event.query.toString());
          
      }
  
      categoryDropdown(){
      this.filteredcategory;
      }


// ***designation autocomplete dropdown***
// ngmodel variable Designation: country;

designationresults: labelId[] =[];
filtereddesignation: labelId[] =[];
    searchdesignation(event) {
        // console.log("checking event "+ event);
        this.filtereddesignation = this.designationresults
        .filter(data => data.label.toString()
        .toLowerCase()
        .indexOf(event.query.toString().toLowerCase()) !== -1);
        // console.log("checking tostring "+ event.query.toString());
        
    }

    designationDropdown(){
    this.filtereddesignation;
    }


  Category;
  City;
  ClientName;
  ContactName;
  edit=false;
  ngOnInit() {
    this._communicationservice.clientData.subscribe(data=>{
        if(data==""){
            this.edit=false;
            this.Category="";
            this.City="";
            this.ClientName="";
            this.ContactName="";
        }else{
            
            this.edit=true;
    
               this.ClientName=data.ClientName;
               this.ClientAddress=data.Address;
                 
                var objCategory={label: data.Category,id :data.categoryId}
                var objcity={label: data.City,id :data.cityId}
                var objtypeofspace={label: data.typeofspaceName,id :data.typeofspaceId}
                var objIndustry={label: data.industryName,id :data.industryId}
                 
                this.storingid= data.id

                this.form.patchValue({
                    categoryName: objCategory,
                    cityName: objcity,
                    spacesName: objtypeofspace,
                    industryName: objIndustry
                     });
        }

 
    }),
    this.form=this._formbuilder.group({
      'clientName': ['',Validators.required],
      'clientAddress': ['',Validators.required],
      'categoryName': ['',Validators.required],
      'cityName': ['',Validators.required],
      'spacesName': ['',Validators.required],
      'industryName': ['',Validators.required],
            
      Parameter:this._formbuilder.array([this.createParameter()])
  })

    // getting Industry from databse
    this._commonNodeCallService.GetIndustry().subscribe(res =>{
    console.log(res);

    if(res['results']!=""){
        res['results'].forEach(element => {
            this.getindustries.push({label:element.Industry_name, id: element.id});
        });
    }
    });
    // getting category from databse
     this._commonNodeCallService.GetCategory().subscribe(res =>{
        console.log(res);
        
        if(res['results']!=""){
            res['results'].forEach(element => {
              this.categoryresults.push({label:element.name, id: element.id});
            });
        }
       });

     // getting city from databse
     this._commonNodeCallService.GetCity().subscribe(res =>{
        console.log(res);
        
        if(res['results']!=""){
            res['results'].forEach(element => {
              this.cityresults.push({label:element.city_name, id: element.id});
            });
        }
       });   

    // getting Type of space from databse
    this._commonNodeCallService.GetTypeofspace().subscribe(res =>{
        console.log(res);
        
        if(res['results']!=""){
            res['results'].forEach(element => {
              this.gettypeofspace.push({label:element.spaces_name, id: element.id});
            });
        }
       });   

    // getting designationList from databse
     this._commonNodeCallService.GetDesignation().subscribe(res =>{
        console.log(res);
        
        if(res['results']!=""){
            res['results'].forEach(element => {
              this.designationresults.push({label:element.desg_name, id: element.id});
            });
        }
       });

  }

  createParameter(): FormGroup{
    return this._formbuilder.group({
    contactName:'',
    designation:'',
    email:'',
    mobileno:''     
    })
} 
addParameter(){
  const parameter=this.createParameter();
  this.parameters.push(parameter);
}
removeParamter(index){
  this.parameters.removeAt(index);
}

get parameters():FormArray{
    return this.form.get('Parameter') as FormArray;
}
formerror:boolean=false;
  Submit(data){
    
    if(this.form.invalid){
        this.formerror=true;
    }
    else{
            console.log("mera client ka data"+JSON.stringify(data));  
            // giving action
            data.actionType ="submit"; 
            //var data;
            this._commonNodeCallService.UpdateClient(data).subscribe(res =>{
            console.log(res);
            if(res['success']){
                console.log("details added in clientmaster table");            
                
                // this.emailalreadyexists=false;
               // this._communicationservice.ClientUpdate(false);          
            }
            // else{
            //     this.emailalreadyexists=true;
            // }
            })
    }

    
  }
  Update(data){
    data.actionType ="update";
    this._communicationservice.ClientUpdate(false);
 }
  Cancel(){
        this.edit=false;
        this._communicationservice.ClientEdit(false);
  }
  
  get clientName(){
      return this.form.get('clientName');
  }
  get contactName(){
      return this.form.get('contactName');
  }
  get designation(){
      return this.form.get('designation');
  }
  get email(){
      return this.form.get('email');
  }
  get cityName(){
      return this.form.get('cityName');
  }
  get spacesName(){
      return this.form.get('spacesName');
  }
  get industryName(){
      return this.form.get('industryName');
  }
  get categoryName(){
      return this.form.get('categoryName');
  }
  get clientAddress(){
    return this.form.get('clientAddress');
    }
    get mobileno(){
    return this.form.get('mobileno');
    }

 

}
